# -*- coding: utf-8 -*-
"""SalesPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rqydRgs1kjJBDFTNGCsdl4PSXKNrt4mO
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

path = '/content/drive/MyDrive/Advertising.csv'
df = pd.read_csv(path)
df.head()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df[['TV','Radio','Newspaper']] = scaler.fit_transform(df[['TV','Radio','Newspaper']])
from sklearn.model_selection import train_test_split
sale = 42
X = df.drop(['Sales'], axis=1)
y = df['Sales']

x_train, x_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=sale)
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train,y_train)
y_pred = lr.predict(x_test)
from sklearn.metrics import mean_absolute_error, mean_squared_error
print(mean_absolute_error(y_true=y_test, y_pred=y_pred))
print(mean_squared_error(y_true=y_test, y_pred=y_pred))

difference = pd.DataFrame({
    'fixed values' : y_test,
    'predicted values' : y_pred,
})

difference['difference'] = difference['fixed values'] - difference['predicted values']
difference.head()

difference.shape

sns.pairplot(df)
plt.show()

plt.figure(figsize=(10, 6), dpi=120, facecolor='w', edgecolor='k')
f = range(0,40)
k = [0 for i in range(0,40)]
plt.scatter( f, difference.difference[:], label = 'Differences')
plt.plot( f, k , color = 'red')
plt.xlabel('Adjusted Points')
plt.ylabel('Errors')
plt.title('Error Graph')
plt.ylim(-10, 10)
plt.legend()

plt.figure(figsize=(10, 6), dpi=120, facecolor='w', edgecolor='b')
sns.histplot(difference.difference, kde=True)
plt.xlabel('Error')
plt.ylabel('Frequency')
plt.title('Distribution of difference terms')
plt.show()

from statsmodels.graphics.gofplots import qqplot
fig, ax = plt.subplots(figsize=(5,5) , dpi = 120)
qqplot(difference.difference, line = 's' , ax = ax)
plt.ylabel('Residual Quantiles')
plt.xlabel('Ideal Scaled Quantiles')
plt.title('Checking distribution of difference of Errors')
plt.show()

from statsmodels.graphics.tsaplots import plot_acf
plot_acf(difference.difference)
plt.show()

plt.figure(figsize=(10, 6), dpi=120)
sns.heatmap(df.corr(method='spearman'), annot = True)
plt.show()

from sklearn.tree import DecisionTreeRegressor
dt = DecisionTreeRegressor()
dt.fit(x_train,y_train)
y_pred_dt = dt.predict(x_test)
print(mean_absolute_error(y_true=y_test, y_pred=y_pred_dt))
print(mean_squared_error(y_true=y_test, y_pred=y_pred_dt))